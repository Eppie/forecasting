"""Utility functions for working with the Ollama API."""

from __future__ import annotations

import json
from collections.abc import Callable, Mapping, Sequence
from typing import Any

import ollama
from ollama import Message


def generate_search_queries(question: str, *, model: str = "llama3.3", n: int = 3) -> list[str]:
    """Generate web search queries for a forecasting question using Ollama.

    Args:
        question: The forecasting question to research.
        model: The Ollama model to use. Defaults to ``"llama3.3"``.
        n: Number of search queries to generate.

    Returns:
        A list of search query strings.
    """
    system_prompt = (
        f"Generate {n} concise web search queries that would help answer the following forecasting question.\n"
        "Return them as a JSON list of strings."
    )

    resp = ollama.chat(
        model=model,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question},
        ],
        format="json",
        options={"temperature": 0},
    )

    content = resp.message.content
    if content is None:
        raise ValueError("Model returned empty content")
    queries = json.loads(content)
    if not isinstance(queries, list):
        raise ValueError("Model did not return a list of queries")

    return [str(q) for q in queries]


def execute_tool_calls(
    tool_calls: Sequence[Message.ToolCall],
    tool_map: Mapping[str, Callable[..., Any]],
) -> list[Message]:
    """Execute tool calls from an Ollama chat response.

    Args:
        tool_calls: Tool calls generated by the model.
        tool_map: Mapping of tool names to callables implementing them.

    Returns:
        Messages containing the tool call outputs.
    """
    outputs: list[Message] = []
    for call in tool_calls:
        name = call.function.name
        args = call.function.arguments
        func = tool_map.get(name)
        if func is None:
            raise ValueError(f"Unknown tool: {name}")
        result = func(**args)
        outputs.append(Message(role="tool", content=json.dumps(result)))

    return outputs
